;  LST file generated by mikroListExporter - v.2.0 
; Date/Time: 28/03/2016 13:39:36
;----------------------------------------------

;Address Opcode 	ASM
0x0000	0xF000EF2F  	GOTO        94
_interrupt:
;practica6.c,3 :: 		void interrupt() // rutina de servicio de la interrupción (MikroC)
0x0008	0xF015C000  	MOVFF       R0, 21
;practica6.c,5 :: 		if(INTCON3.INT1IF)   {
0x000C	0xA0F0      	BTFSS       INTCON3, 0 
0x000E	0xD008      	BRA         L_interrupt0
;practica6.c,6 :: 		T0CON = 0x84;
0x0010	0x0E84      	MOVLW       132
0x0012	0x6ED5      	MOVWF       T0CON 
;practica6.c,7 :: 		TMR0H = (3036 >>8);
0x0014	0x0E0B      	MOVLW       11
0x0016	0x6ED7      	MOVWF       TMR0H 
;practica6.c,8 :: 		TMR0L = 3036;
0x0018	0x0EDC      	MOVLW       220
0x001A	0x6ED6      	MOVWF       TMR0L 
;practica6.c,9 :: 		PORTC.B0=1;
0x001C	0x8082      	BSF         PORTC, 0 
;practica6.c,10 :: 		INTCON3.INT1IE = 0;
0x001E	0x96F0      	BCF         INTCON3, 3 
;practica6.c,11 :: 		}
L_interrupt0:
;practica6.c,12 :: 		if(INTCON.TMR0IF)   {
0x0020	0xA4F2      	BTFSS       INTCON, 2 
0x0022	0xD00F      	BRA         L_interrupt1
;practica6.c,13 :: 		TMR0H = (3036 >>8);
0x0024	0x0E0B      	MOVLW       11
0x0026	0x6ED7      	MOVWF       TMR0H 
;practica6.c,14 :: 		TMR0L = 3036;
0x0028	0x0EDC      	MOVLW       220
0x002A	0x6ED6      	MOVWF       TMR0L 
;practica6.c,15 :: 		aux++;
0x002C	0x4A16      	INFSNZ      _aux, 1 
0x002E	0x2A17      	INCF        _aux+1, 1 
;practica6.c,16 :: 		if(aux==5)
0x0030	0x0E00      	MOVLW       0
0x0032	0x1817      	XORWF       _aux+1, 0 
0x0034	0xE102      	BNZ         L__interrupt7
0x0036	0x0E05      	MOVLW       5
0x0038	0x1816      	XORWF       _aux, 0 
L__interrupt7:
0x003A	0xE103      	BNZ         L_interrupt2
;practica6.c,18 :: 		PORTC.B0=0;
0x003C	0x9082      	BCF         PORTC, 0 
;practica6.c,19 :: 		T0CON.TMR0ON=0;
0x003E	0x9ED5      	BCF         T0CON, 7 
;practica6.c,20 :: 		INTCON3.INT1IE = 1;
0x0040	0x86F0      	BSF         INTCON3, 3 
;practica6.c,21 :: 		}
L_interrupt2:
;practica6.c,22 :: 		}
L_interrupt1:
;practica6.c,23 :: 		INTCON3.INT1IF = 0; // se borra el flag de la interrupción INT1
0x0042	0x90F0      	BCF         INTCON3, 0 
;practica6.c,24 :: 		INTCON.TMR0IF = 0; // se pone el flag a 0
0x0044	0x94F2      	BCF         INTCON, 2 
;practica6.c,25 :: 		PORTC.B7 = !PORTC.B7;
0x0046	0x7E82      	BTG         PORTC, 7 
;practica6.c,27 :: 		}
L_end_interrupt:
L__interrupt6:
0x0048	0xF000C015  	MOVFF       21, R0
0x004C	0x0011      	RETFIE      1
; end of _interrupt
___CC2DW:
;__Lib_System.c,21 :: 		
;__Lib_System.c,23 :: 		
_CC2DL_Loop1:
;__Lib_System.c,24 :: 		
0x004E	0x0009      	TBLRD*+
;__Lib_System.c,25 :: 		
0x0050	0xFFE6CFF5  	MOVFF       TABLAT, POSTINC1
;__Lib_System.c,26 :: 		
0x0054	0x0600      	DECF        R0, 1, 0
;__Lib_System.c,27 :: 		
0x0056	0xE1FB      	BNZ         _CC2DL_Loop1
;__Lib_System.c,28 :: 		
0x0058	0x0601      	DECF        R1, 1, 0
;__Lib_System.c,29 :: 		
0x005A	0xE1F9      	BNZ         _CC2DL_Loop1
;__Lib_System.c,31 :: 		
L_end___CC2DW:
0x005C	0x0012      	RETURN      0
; end of ___CC2DW
_main:
0x005E	0x6A16      	CLRF        _aux 
0x0060	0x6A17      	CLRF        23 
;practica6.c,29 :: 		void main()
;practica6.c,31 :: 		TRISC = 0x00;
0x0062	0x6A94      	CLRF        TRISC 
;practica6.c,32 :: 		PORTC = 0;
0x0064	0x6A82      	CLRF        PORTC 
;practica6.c,34 :: 		TRISB = 0x02; // se configura RB1 como entrada
0x0066	0x0E02      	MOVLW       2
0x0068	0x6E93      	MOVWF       TRISB 
;practica6.c,35 :: 		PORTB=0;
0x006A	0x6A81      	CLRF        PORTB 
;practica6.c,37 :: 		INTCON.PEIE = 0; // es una interrupción de tipo core
0x006C	0x9CF2      	BCF         INTCON, 6 
;practica6.c,38 :: 		RCON.IPEN = 0; // se deshabilitan las interrupciones con prioridad
0x006E	0x9ED0      	BCF         RCON, 7 
;practica6.c,39 :: 		INTCON.TMR0IF = 0; // se pone el flag a 0
0x0070	0x94F2      	BCF         INTCON, 2 
;practica6.c,40 :: 		INTCON.TMR0IE = 1; // se habilita la interrupción del Timer 0
0x0072	0x8AF2      	BSF         INTCON, 5 
;practica6.c,45 :: 		RCON.IPEN = 0; // se deshabilitan las interrupciones con prioridad (MikroC)
0x0074	0x9ED0      	BCF         RCON, 7 
;practica6.c,46 :: 		INTCON2.INTEDG1 = 1; //la interrupción la provoca un flanco de subida (x=1)/ bajada (x=0)
0x0076	0x8AF1      	BSF         INTCON2, 5 
;practica6.c,47 :: 		INTCON3.INT1IF = 0; // se pone el flag de la interrupción INT1 a 0
0x0078	0x90F0      	BCF         INTCON3, 0 
;practica6.c,48 :: 		INTCON3.INT1IE = 1; // se habilita la interrupción INT1
0x007A	0x86F0      	BSF         INTCON3, 3 
;practica6.c,49 :: 		INTCON.GIE = 1; // se habilitan las interrupciones en general
0x007C	0x8EF2      	BSF         INTCON, 7 
;practica6.c,52 :: 		while(1);
L_main3:
0x007E	0xD7FF      	BRA         L_main3
;practica6.c,53 :: 		}
L_end_main:
0x0080	0xD7FF      	BRA         $+0
; end of _main
Symbol List:
//** Routines locations **
//ADDRESS    SIZE    PROCEDURE
//----------------------------------------------
0x0008      [70]    _interrupt
0x004E      [16]    ___CC2DW
0x005E      [36]    _main
//** Variables locations ** 
//ADDRESS    SIZE    VARIABLE
//----------------------------------------------
0x0000       [1]    R0
0x0001       [1]    R1
0x0002       [1]    R2
0x0003       [1]    R3
0x0004       [1]    R4
0x0005       [1]    R5
0x0006       [1]    R6
0x0007       [1]    R7
0x0008       [1]    R8
0x0009       [1]    R9
0x000A       [1]    R10
0x000B       [1]    R11
0x000C       [1]    R12
0x000D       [1]    R13
0x000E       [1]    R14
0x000F       [1]    R15
0x0010       [1]    R16
0x0011       [1]    R17
0x0012       [1]    R18
0x0013       [1]    R19
0x0014       [1]    R20
0x0016       [2]    _aux
0x0F81       [1]    PORTB
0x0F82       [1]    PORTC
0x0F93       [1]    TRISB
0x0F94       [1]    TRISC
0x0FD0       [1]    RCON
0x0FD5       [1]    T0CON
0x0FD6       [1]    TMR0L
0x0FD7       [1]    TMR0H
0x0FD8       [1]    STATUS
0x0FD9       [1]    FSR2L
0x0FDA       [1]    FSR2H
0x0FDE       [1]    POSTINC2
0x0FE0       [1]    BSR
0x0FE1       [1]    FSR1L
0x0FE2       [1]    FSR1H
0x0FE4       [1]    PREINC1
0x0FE6       [1]    POSTINC1
0x0FE7       [1]    INDF1
0x0FE8       [1]    WREG
0x0FE9       [1]    FSR0L
0x0FEA       [1]    FSR0H
0x0FEE       [1]    POSTINC0
0x0FF0       [1]    INTCON3
0x0FF1       [1]    INTCON2
0x0FF2       [1]    INTCON
0x0FF3       [1]    PRODL
0x0FF4       [1]    PRODH
0x0FF5       [1]    TABLAT
0x0FF6       [1]    TBLPTRL
0x0FF7       [1]    TBLPTRH
0x0FF8       [1]    TBLPTRU
