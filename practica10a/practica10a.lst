;  LST file generated by mikroListExporter - v.2.0 
; Date/Time: 09/05/2016 14:34:27
;----------------------------------------------

;Address Opcode 	ASM
0x0000	0xF000EF41  	GOTO        130
_interrupt:
;practica10a.c,6 :: 		void interrupt()
0x0008	0xF015C000  	MOVFF       R0, 21
;practica10a.c,8 :: 		if(INTCON.INT0IF)
0x000C	0xA2F2      	BTFSS       INTCON, 1 
0x000E	0xD002      	BRA         L_interrupt0
;practica10a.c,12 :: 		freq++;
0x0010	0x2A16      	INCF        _freq, 1 
;practica10a.c,14 :: 		INTCON.INT0IF=0;
0x0012	0x92F2      	BCF         INTCON, 1 
;practica10a.c,15 :: 		}
L_interrupt0:
;practica10a.c,16 :: 		if(INTCON3.INT1IF)
0x0014	0xA0F0      	BTFSS       INTCON3, 0 
0x0016	0xD009      	BRA         L_interrupt1
;practica10a.c,18 :: 		if(freq > 1)
0x0018	0x0E80      	MOVLW       128
0x001A	0x0A01      	XORLW       1
0x001C	0x6E00      	MOVWF       R0 
0x001E	0x0E80      	MOVLW       128
0x0020	0x1816      	XORWF       _freq, 0 
0x0022	0x5C00      	SUBWF       R0, 0 
0x0024	0xA0D8      	BTFSS       STATUS, 0 
;practica10a.c,20 :: 		freq--;
0x0026	0x0616      	DECF        _freq, 1 
;practica10a.c,21 :: 		}
L_interrupt2:
;practica10a.c,22 :: 		INTCON3.INT1IF = 0;
0x0028	0x90F0      	BCF         INTCON3, 0 
;practica10a.c,23 :: 		}
L_interrupt1:
;practica10a.c,25 :: 		}
L_end_interrupt:
L__interrupt15:
0x002A	0xF000C015  	MOVFF       21, R0
0x002E	0x0011      	RETFIE      1
; end of _interrupt
_SPI1_Init:
;__Lib_SPI_b10c7.c,23 :: 		
;__Lib_SPI_b10c7.c,24 :: 		
0x0030	0x0EFF      	MOVLW       _SPI1_Read
0x0032	0x6E1F      	MOVWF       _SPI_Rd_Ptr 
0x0034	0x0EFF      	MOVLW       hi_addr(_SPI1_Read)
0x0036	0x6E20      	MOVWF       _SPI_Rd_Ptr+1 
0x0038	0x0EFF      	MOVLW       FARG_SPI1_Read_buffer
0x003A	0x6E21      	MOVWF       _SPI_Rd_Ptr+2 
0x003C	0x0EFF      	MOVLW       hi_addr(FARG_SPI1_Read_buffer)
0x003E	0x6E22      	MOVWF       _SPI_Rd_Ptr+3 
;__Lib_SPI_b10c7.c,25 :: 		
0x0040	0x0E60      	MOVLW       _SPI1_Write
0x0042	0x6E1B      	MOVWF       _SPI_Wr_Ptr 
0x0044	0x0E00      	MOVLW       hi_addr(_SPI1_Write)
0x0046	0x6E1C      	MOVWF       _SPI_Wr_Ptr+1 
0x0048	0x0E23      	MOVLW       FARG_SPI1_Write_data_
0x004A	0x6E1D      	MOVWF       _SPI_Wr_Ptr+2 
0x004C	0x0E00      	MOVLW       hi_addr(FARG_SPI1_Write_data_)
0x004E	0x6E1E      	MOVWF       _SPI_Wr_Ptr+3 
;__Lib_SPI_b10c7.c,27 :: 		
0x0050	0x9E94      	BCF         TRISC7_bit, BitPos(TRISC7_bit+0) 
;__Lib_SPI_b10c7.c,28 :: 		
0x0052	0x9293      	BCF         TRISB1_bit, BitPos(TRISB1_bit+0) 
;__Lib_SPI_b10c7.c,29 :: 		
0x0054	0x8093      	BSF         TRISB0_bit, BitPos(TRISB0_bit+0) 
;__Lib_SPI_b10c7.c,31 :: 		
0x0056	0x6AC6      	CLRF        SSPCON1 
;__Lib_SPI_b10c7.c,32 :: 		
0x0058	0x0E40      	MOVLW       64
0x005A	0x6EC7      	MOVWF       SSPSTAT 
;__Lib_SPI_b10c7.c,33 :: 		
0x005C	0x8AC6      	BSF         SSPCON1, 5 
;__Lib_SPI_b10c7.c,35 :: 		
L_end_SPI1_Init:
0x005E	0x0012      	RETURN      0
; end of _SPI1_Init
_SPI1_Write:
;__Lib_SPI_b10c7.c,77 :: 		
;__Lib_SPI_b10c7.c,80 :: 		
0x0060	0xFFC9C023  	MOVFF       FARG_SPI1_Write_data_, SSPBUF
;__Lib_SPI_b10c7.c,81 :: 		
L_SPI1_Write8:
0x0064	0xB0C7      	BTFSC       SSPSTAT, 0 
0x0066	0xD002      	BRA         L_SPI1_Write9
;__Lib_SPI_b10c7.c,82 :: 		
0x0068	0x0000      	NOP
0x006A	0xD7FC      	BRA         L_SPI1_Write8
L_SPI1_Write9:
;__Lib_SPI_b10c7.c,83 :: 		
0x006C	0xF000CFC9  	MOVFF       SSPBUF, R0
;__Lib_SPI_b10c7.c,85 :: 		
L_end_SPI1_Write:
0x0070	0x0012      	RETURN      0
; end of _SPI1_Write
___CC2DW:
;__Lib_System.c,21 :: 		
;__Lib_System.c,23 :: 		
_CC2DL_Loop1:
;__Lib_System.c,24 :: 		
0x0072	0x0009      	TBLRD*+
;__Lib_System.c,25 :: 		
0x0074	0xFFE6CFF5  	MOVFF       TABLAT, POSTINC1
;__Lib_System.c,26 :: 		
0x0078	0x0600      	DECF        R0, 1, 0
;__Lib_System.c,27 :: 		
0x007A	0xE1FB      	BNZ         _CC2DL_Loop1
;__Lib_System.c,28 :: 		
0x007C	0x0601      	DECF        R1, 1, 0
;__Lib_System.c,29 :: 		
0x007E	0xE1F9      	BNZ         _CC2DL_Loop1
;__Lib_System.c,31 :: 		
L_end___CC2DW:
0x0080	0x0012      	RETURN      0
; end of ___CC2DW
_main:
0x0082	0x0E01      	MOVLW       1
0x0084	0x6E16      	MOVWF       _freq 
;practica10a.c,27 :: 		void main() {
;practica10a.c,28 :: 		TRISB = 0xFF;
0x0086	0x0EFF      	MOVLW       255
0x0088	0x6E93      	MOVWF       TRISB 
;practica10a.c,29 :: 		TRISC = 0x00;
0x008A	0x6A94      	CLRF        TRISC 
;practica10a.c,30 :: 		PORTC = 0x00;
0x008C	0x6A82      	CLRF        PORTC 
;practica10a.c,31 :: 		SPI1_Init();
0x008E	0xDFD0      	RCALL       _SPI1_Init
;practica10a.c,32 :: 		delay_ms(100);
0x0090	0x0E02      	MOVLW       2
0x0092	0x6E0B      	MOVWF       R11, 0
0x0094	0x0E04      	MOVLW       4
0x0096	0x6E0C      	MOVWF       R12, 0
0x0098	0x0EBA      	MOVLW       186
0x009A	0x6E0D      	MOVWF       R13, 0
L_main3:
0x009C	0x2E0D      	DECFSZ      R13, 1, 0
0x009E	0xD7FE      	BRA         L_main3
0x00A0	0x2E0C      	DECFSZ      R12, 1, 0
0x00A2	0xD7FC      	BRA         L_main3
0x00A4	0x2E0B      	DECFSZ      R11, 1, 0
0x00A6	0xD7FA      	BRA         L_main3
0x00A8	0x0000      	NOP
;practica10a.c,34 :: 		INTCON2.RBPU=0;
0x00AA	0x9EF1      	BCF         INTCON2, 7 
;practica10a.c,35 :: 		INTCON.INT0IF = 0;
0x00AC	0x92F2      	BCF         INTCON, 1 
;practica10a.c,36 :: 		INTCON2.INTEDG0=1;
0x00AE	0x8CF1      	BSF         INTCON2, 6 
;practica10a.c,37 :: 		INTCON.INT0IE = 1;
0x00B0	0x88F2      	BSF         INTCON, 4 
;practica10a.c,38 :: 		INTCON.GIE = 1;
0x00B2	0x8EF2      	BSF         INTCON, 7 
;practica10a.c,40 :: 		TRISB.B1 = 1; // se configura RB1 como entrada
0x00B4	0x8293      	BSF         TRISB, 1 
;practica10a.c,41 :: 		INTCON.PEIE = 0; // es de tipo core
0x00B6	0x9CF2      	BCF         INTCON, 6 
;practica10a.c,42 :: 		RCON.IPEN = 0; // se deshabilitan las interrupciones con prioridad (MikroC)
0x00B8	0x9ED0      	BCF         RCON, 7 
;practica10a.c,43 :: 		INTCON2.INTEDG1 = 1; //la interrupción la provoca un flanco de subida (x=1)/ bajada (x=0)
0x00BA	0x8AF1      	BSF         INTCON2, 5 
;practica10a.c,44 :: 		INTCON3.INT1IF = 0; // se pone el flag de la interrupción INT1 a 0
0x00BC	0x90F0      	BCF         INTCON3, 0 
;practica10a.c,45 :: 		INTCON3.INT1IE = 1; // se habilita la interrupción INT1
0x00BE	0x86F0      	BSF         INTCON3, 3 
;practica10a.c,46 :: 		INTCON.GIE = 1; // se habilitan las interrupciones en general
0x00C0	0x8EF2      	BSF         INTCON, 7 
;practica10a.c,49 :: 		while(1){
L_main4:
;practica10a.c,51 :: 		for (paquete=0;paquete<=4095;paquete+=freq){
0x00C2	0x6A17      	CLRF        _paquete 
0x00C4	0x6A18      	CLRF        _paquete+1 
L_main6:
0x00C6	0x0E80      	MOVLW       128
0x00C8	0x0A0F      	XORLW       15
0x00CA	0x6E00      	MOVWF       R0 
0x00CC	0x0E80      	MOVLW       128
0x00CE	0x1818      	XORWF       _paquete+1, 0 
0x00D0	0x5C00      	SUBWF       R0, 0 
0x00D2	0xE102      	BNZ         L__main17
0x00D4	0x5017      	MOVF        _paquete, 0 
0x00D6	0x08FF      	SUBLW       255
L__main17:
0x00D8	0xE326      	BNC         L_main7
;practica10a.c,53 :: 		PORTC.B0 = 0;
0x00DA	0x9082      	BCF         PORTC, 0 
;practica10a.c,54 :: 		aux = 0x30 | ((paquete >> 8) & 0x0F);
0x00DC	0xF000C018  	MOVFF       _paquete+1, R0
0x00E0	0x0E00      	MOVLW       0
0x00E2	0xBE18      	BTFSC       _paquete+1, 7 
0x00E4	0x0EFF      	MOVLW       255
0x00E6	0x6E01      	MOVWF       R1 
0x00E8	0x0E0F      	MOVLW       15
0x00EA	0x1600      	ANDWF       R0, 1 
0x00EC	0x0E00      	MOVLW       0
0x00EE	0x1601      	ANDWF       R1, 1 
0x00F0	0x0E30      	MOVLW       48
0x00F2	0x1200      	IORWF       R0, 1 
0x00F4	0x0E00      	MOVLW       0
0x00F6	0x1201      	IORWF       R1, 1 
0x00F8	0xF019C000  	MOVFF       R0, _aux
0x00FC	0xF01AC001  	MOVFF       R1, _aux+1
;practica10a.c,55 :: 		SPI1_Write(aux);
0x0100	0xF023C000  	MOVFF       R0, FARG_SPI1_Write_data_
0x0104	0xDFAD      	RCALL       _SPI1_Write
;practica10a.c,56 :: 		SPI1_Write(paquete);
0x0106	0xF023C017  	MOVFF       _paquete, FARG_SPI1_Write_data_
0x010A	0xDFAA      	RCALL       _SPI1_Write
;practica10a.c,57 :: 		PORTC.B0 = 1;
0x010C	0x8082      	BSF         PORTC, 0 
;practica10a.c,58 :: 		delay_us(10);
0x010E	0x0E06      	MOVLW       6
0x0110	0x6E0D      	MOVWF       R13, 0
L_main9:
0x0112	0x2E0D      	DECFSZ      R13, 1, 0
0x0114	0xD7FE      	BRA         L_main9
0x0116	0x0000      	NOP
;practica10a.c,51 :: 		for (paquete=0;paquete<=4095;paquete+=freq){
0x0118	0x5016      	MOVF        _freq, 0 
0x011A	0x2617      	ADDWF       _paquete, 1 
0x011C	0x0E00      	MOVLW       0
0x011E	0xBE16      	BTFSC       _freq, 7 
0x0120	0x0EFF      	MOVLW       255
0x0122	0x2218      	ADDWFC      _paquete+1, 1 
;practica10a.c,60 :: 		}
0x0124	0xD7D0      	BRA         L_main6
L_main7:
;practica10a.c,61 :: 		for (paquete=4095;paquete>=0;paquete-=freq){
0x0126	0x0EFF      	MOVLW       255
0x0128	0x6E17      	MOVWF       _paquete 
0x012A	0x0E0F      	MOVLW       15
0x012C	0x6E18      	MOVWF       _paquete+1 
L_main10:
0x012E	0x0E80      	MOVLW       128
0x0130	0x1818      	XORWF       _paquete+1, 0 
0x0132	0x6E00      	MOVWF       R0 
0x0134	0x0E80      	MOVLW       128
0x0136	0x5C00      	SUBWF       R0, 0 
0x0138	0xE102      	BNZ         L__main18
0x013A	0x0E00      	MOVLW       0
0x013C	0x5C17      	SUBWF       _paquete, 0 
L__main18:
0x013E	0xE326      	BNC         L_main11
;practica10a.c,63 :: 		PORTC.B0 = 0;
0x0140	0x9082      	BCF         PORTC, 0 
;practica10a.c,64 :: 		aux = 0x30 | ((paquete >> 8) & 0x0F);
0x0142	0xF000C018  	MOVFF       _paquete+1, R0
0x0146	0x0E00      	MOVLW       0
0x0148	0xBE18      	BTFSC       _paquete+1, 7 
0x014A	0x0EFF      	MOVLW       255
0x014C	0x6E01      	MOVWF       R1 
0x014E	0x0E0F      	MOVLW       15
0x0150	0x1600      	ANDWF       R0, 1 
0x0152	0x0E00      	MOVLW       0
0x0154	0x1601      	ANDWF       R1, 1 
0x0156	0x0E30      	MOVLW       48
0x0158	0x1200      	IORWF       R0, 1 
0x015A	0x0E00      	MOVLW       0
0x015C	0x1201      	IORWF       R1, 1 
0x015E	0xF019C000  	MOVFF       R0, _aux
0x0162	0xF01AC001  	MOVFF       R1, _aux+1
;practica10a.c,65 :: 		SPI1_Write(aux);
0x0166	0xF023C000  	MOVFF       R0, FARG_SPI1_Write_data_
0x016A	0xDF7A      	RCALL       _SPI1_Write
;practica10a.c,66 :: 		SPI1_Write(paquete);
0x016C	0xF023C017  	MOVFF       _paquete, FARG_SPI1_Write_data_
0x0170	0xDF77      	RCALL       _SPI1_Write
;practica10a.c,67 :: 		PORTC.B0 = 1;
0x0172	0x8082      	BSF         PORTC, 0 
;practica10a.c,68 :: 		delay_us(10);
0x0174	0x0E06      	MOVLW       6
0x0176	0x6E0D      	MOVWF       R13, 0
L_main13:
0x0178	0x2E0D      	DECFSZ      R13, 1, 0
0x017A	0xD7FE      	BRA         L_main13
0x017C	0x0000      	NOP
;practica10a.c,61 :: 		for (paquete=4095;paquete>=0;paquete-=freq){
0x017E	0x5016      	MOVF        _freq, 0 
0x0180	0x5E17      	SUBWF       _paquete, 1 
0x0182	0x0E00      	MOVLW       0
0x0184	0xBE16      	BTFSC       _freq, 7 
0x0186	0x0EFF      	MOVLW       255
0x0188	0x5A18      	SUBWFB      _paquete+1, 1 
;practica10a.c,70 :: 		}
0x018A	0xD7D1      	BRA         L_main10
L_main11:
;practica10a.c,71 :: 		}
0x018C	0xD79A      	BRA         L_main4
;practica10a.c,73 :: 		}
L_end_main:
0x018E	0xD7FF      	BRA         $+0
; end of _main
Symbol List:
//** Routines locations **
//ADDRESS    SIZE    PROCEDURE
//----------------------------------------------
0x0008      [40]    _interrupt
0x0030      [48]    _SPI1_Init
0x0060      [18]    _SPI1_Write
0x0072      [16]    ___CC2DW
0x0082     [270]    _main
//** Variables locations ** 
//ADDRESS    SIZE    VARIABLE
//----------------------------------------------
0x0000       [1]    __Lib_SoftI2C_PutZerosToLATSda_temp_sda_L0
0x0000       [1]    SPI1_Write_tmp_L0
0x0000       [1]    __Lib_SoftI2C_PutZerosToLATScl_temp_scl_L0
0x0000       [1]    FLASH_Erase_64_SaveINTCON_L0
0x0000       [1]    UART1_Init_tmp_L0
0x0000       [1]    R0
0x0000       [1]    EEPROM_Write_SaveINTCON_L0
0x0001       [1]    __Lib_TFT_16bit_JPEG_FileReadBytes_Result_L0
0x0001       [1]    R1
0x0001       [2]    FLASH_Read_N_Bytes_i_L0
0x0001       [1]    __Lib_PS2_Wait_Falling_nsample_L0
0x0001       [1]    I2C1_Rd_tmp_L0
0x0001       [1]    __Lib_TFT_JPEG_FileReadBytes_Result_L0
0x0001       [1]    __Lib_USB_genHID_?FLOC____Lib_USB_genHID_USB_Handle_BusyT1
0x0001       [1]    FLASH_Erase_Write_64_i_L0
0x0001       [1]    UART1_Read___tmp_UART1_Read_L0
0x0001       [1]    ispunct_rslt_L0
0x0001       [1]    FLASH_Write_32_i_L0
0x0001       [1]    __Lib_TFT_16bit_JPEG_FileRead_i_L0
0x0001       [1]    __Lib_TFT_JPEG_FileRead_i_L0
0x0002       [1]    R2
0x0002       [2]    memchr_s_L0
0x0002       [2]    strlen_cp_L0
0x0002       [1]    FLASH_Write_32_SaveINTCON_L0
0x0002       [2]    memcpy_dd_L0
0x0002       [2]    memset_pp_L0
0x0002       [1]    FLASH_Erase_Write_64_j_L0
0x0002       [1]    __Lib_USB_genHID_USB_CtrlTrf_Rx_Service_byteToRead_L0
0x0003       [2]    __Lib_USB_genHID_USB_CtrlTrf_Tx_Service_byteToSend_L0
0x0003       [1]    R3
0x0003       [2]    Ltrim_original_L0
0x0003       [1]    FLASH_Erase_Write_64_SaveINTCON_L0
0x0003       [1]    __Lib_USB_genHID_USB_CtrlTrf_Rx_Service_i_L0
0x0003       [2]    memmove_tt_L0
0x0003       [1]    __Lib_Sprinti_?FLOC____Lib_Sprinti_Do_FillT29
0x0003       [1]    MM_Init_i_L0
0x0003       [2]    MM_TotalFreeMemSize_Tot_L0
0x0003       [2]    __Lib_MmcFat16_f16_toInt_l_L0
0x0004       [2]    strcat_cp_L0
0x0004       [2]    __Lib_USB_genHID_USB_Std_Feature_Req_Handler_p_L0
0x0004       [2]    memcpy_ss_L0
0x0004       [1]    R4
0x0004       [2]    strcpy_cp_L0
0x0004       [2]    strncpy_cp_L0
0x0004       [1]    __Lib_Sprinti_?FLOC____Lib_Sprinti_Do_FillT40
0x0004       [2]    strncat_cp_L0
0x0004       [2]    __Lib_USB_genHID_USB_Transfer_Packet_handle_L0
0x0004       [2]    frexp_pom_L0
0x0004       [1]    __Lib_USB_genHID_GetMaxIndexInDevDsc_index_L0
0x0004       [2]    __Lib_MemManager_MM_GetMemAlign_P_L0
0x0004       [2]    __Lib_USB_genHID_USB_Get_Status_Handler_p_L2
0x0005       [1]    R5
0x0005       [2]    LongIntToHex_input_half_L0
0x0005       [2]    Ltrim_p_L0
0x0005       [1]    __Lib_Sprinti_?FLOC____Lib_Sprinti_Do_FillT54
0x0005       [2]    __Lib_USB_genHID_USB_Configure_Endpoint_handle_L0
0x0005       [1]    MM_TotalFreeMemSize_i_L0
0x0005       [2]    LongWordToHex_input_half_L0
0x0005       [2]    memmove_ff_L0
0x0006       [1]    __Lib_Sprinti_?FLOC____Lib_Sprinti_Do_FillT69
0x0006       [1]    __Lib_MemManager_MM_GetMemAlign_i_L0
0x0006       [2]    __Lib_USB_genHID_GetMaxIndexInConfigDsc_totalLen_L0
0x0006       [1]    R6
0x0007       [1]    __Lib_TFT_16bit_JPEG_GenerateHuffmanTables_bLength_L0
0x0007       [1]    __Lib_TFT_JPEG_GenerateHuffmanTables_bLength_L0
0x0007       [1]    R7
0x0008       [1]    R8
0x0008       [1]    __Lib_TFT_JPEG_GenerateHuffmanTables_bTable_L0
0x0008       [3]    __Lib_USB_genHID_GetMaxIndexInConfigDsc_ptr_L0
0x0008       [1]    __Lib_TFT_16bit_JPEG_GenerateHuffmanTables_bTable_L0
0x0009       [4]    __Lib_MmcFat16_f16_toLong_l_L0
0x0009       [1]    R9
0x000A       [1]    R10
0x000B       [1]    R11
0x000C       [1]    R12
0x000D       [1]    R13
0x000E       [1]    R14
0x000F       [1]    R15
0x0010       [1]    R16
0x0011       [1]    R17
0x0012       [1]    R18
0x0013       [1]    R19
0x0014       [1]    R20
0x0016       [1]    _freq
0x0017       [2]    _paquete
0x0019       [2]    _aux
0x001B       [4]    _SPI_Wr_Ptr
0x001F       [4]    _SPI_Rd_Ptr
0x0023       [1]    FARG_SPI1_Write_data_
0x0F82       [1]    PORTC
0x0F93       [1]    TRISB
0x0F93       [0]    TRISB1_bit
0x0F93       [0]    TRISB0_bit
0x0F94       [0]    TRISC7_bit
0x0F94       [1]    TRISC
0x0FC6       [1]    SSPCON1
0x0FC7       [1]    SSPSTAT
0x0FC9       [1]    SSPBUF
0x0FD0       [1]    RCON
0x0FD8       [1]    STATUS
0x0FD9       [1]    FSR2L
0x0FDA       [1]    FSR2H
0x0FDE       [1]    POSTINC2
0x0FE0       [1]    BSR
0x0FE1       [1]    FSR1L
0x0FE2       [1]    FSR1H
0x0FE4       [1]    PREINC1
0x0FE6       [1]    POSTINC1
0x0FE7       [1]    INDF1
0x0FE8       [1]    WREG
0x0FE9       [1]    FSR0L
0x0FEA       [1]    FSR0H
0x0FEE       [1]    POSTINC0
0x0FF0       [1]    INTCON3
0x0FF1       [1]    INTCON2
0x0FF2       [1]    INTCON
0x0FF3       [1]    PRODL
0x0FF4       [1]    PRODH
0x0FF5       [1]    TABLAT
0x0FF6       [1]    TBLPTRL
0x0FF7       [1]    TBLPTRH
0x0FF8       [1]    TBLPTRU
